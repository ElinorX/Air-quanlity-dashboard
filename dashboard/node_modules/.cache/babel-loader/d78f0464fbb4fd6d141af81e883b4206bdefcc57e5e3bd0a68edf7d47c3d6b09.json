{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelSelect as _vModelSelect, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\",\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  class: \"header\"\n};\nconst _hoisted_3 = {\n  class: \"row\"\n};\nconst _hoisted_4 = {\n  class: \"card\"\n};\nconst _hoisted_5 = {\n  class: \"pollutant-selector\"\n};\nconst _hoisted_6 = [\"value\"];\nconst _hoisted_7 = {\n  ref: \"timeSeriesChart\",\n  class: \"chart\"\n};\nconst _hoisted_8 = {\n  class: \"row\"\n};\nconst _hoisted_9 = {\n  class: \"card\"\n};\nconst _hoisted_10 = {\n  class: \"station-selector\"\n};\nconst _hoisted_11 = [\"value\"];\nconst _hoisted_12 = {\n  ref: \"mapChart\",\n  class: \"chart\"\n};\nconst _hoisted_13 = {\n  class: \"row two-charts\"\n};\nconst _hoisted_14 = {\n  class: \"card\"\n};\nconst _hoisted_15 = {\n  ref: \"barChart\",\n  class: \"chart\"\n};\nconst _hoisted_16 = {\n  class: \"card\"\n};\nconst _hoisted_17 = {\n  ref: \"pieChart\",\n  class: \"chart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Title area \"), _createElementVNode(\"header\", _hoisted_2, [_cache[3] || (_cache[3] = _createElementVNode(\"h1\", null, \"Air Quality Monitoring Data Visualization\", -1 /* HOISTED */)), _createElementVNode(\"p\", null, _toDisplayString($setup.timeRange), 1 /* TEXT */)]), _createCommentVNode(\" First row: Time series chart \"), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_cache[5] || (_cache[5] = _createElementVNode(\"h2\", null, \"Pollutant Concentration Trends\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_5, [_cache[4] || (_cache[4] = _createElementVNode(\"label\", null, \"Select Pollutant:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.selectedPollutant = $event)\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.metadata.pollutants, p => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: p,\n      value: p\n    }, _toDisplayString(p), 9 /* TEXT, PROPS */, _hoisted_6);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $setup.selectedPollutant]])]), _createElementVNode(\"div\", _hoisted_7, null, 512 /* NEED_PATCH */)])]), _createCommentVNode(\" Second row: Geographic distribution map \"), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"div\", _hoisted_9, [_cache[7] || (_cache[7] = _createElementVNode(\"h2\", null, \"Monitoring Station Distribution\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_10, [_withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.selectedStation = $event),\n    onChange: _cache[2] || (_cache[2] = (...args) => $setup.handleStationChange && $setup.handleStationChange(...args))\n  }, [_cache[6] || (_cache[6] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"All Stations\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.stations, station => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: station['Site ID'],\n      value: station['Site ID']\n    }, _toDisplayString(station['Local Site Name']), 9 /* TEXT, PROPS */, _hoisted_11);\n  }), 128 /* KEYED_FRAGMENT */))], 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, $setup.selectedStation]])]), _createElementVNode(\"div\", _hoisted_12, null, 512 /* NEED_PATCH */)])]), _createCommentVNode(\" Third row: Statistical charts \"), _createElementVNode(\"div\", _hoisted_13, [_createElementVNode(\"div\", _hoisted_14, [_cache[8] || (_cache[8] = _createElementVNode(\"h2\", null, \"Station Pollutant Coverage\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_15, null, 512 /* NEED_PATCH */)]), _createElementVNode(\"div\", _hoisted_16, [_cache[9] || (_cache[9] = _createElementVNode(\"h2\", null, \"AQI Distribution\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_17, null, 512 /* NEED_PATCH */)])])]);\n}","map":{"version":3,"names":["id","class","ref","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","_toDisplayString","$setup","timeRange","_hoisted_3","_hoisted_4","_hoisted_5","_cache","$event","selectedPollutant","_Fragment","_renderList","metadata","pollutants","p","key","value","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","selectedStation","onChange","args","handleStationChange","stations","station","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17"],"sources":["/Users/elinorzhang/Desktop/usc/DSCI554/final project dataset/dashboard/src/App.vue"],"sourcesContent":["<template>\n  <div id=\"app\" class=\"container\">\n    <!-- Title area -->\n    <header class=\"header\">\n      <h1>Air Quality Monitoring Data Visualization</h1>\n      <p>{{ timeRange }}</p>\n    </header>\n\n    <!-- First row: Time series chart -->\n    <div class=\"row\">\n      <div class=\"card\">\n        <h2>Pollutant Concentration Trends</h2>\n        <div class=\"pollutant-selector\">\n          <label>Select Pollutant:</label>\n          <select v-model=\"selectedPollutant\">\n            <option v-for=\"p in metadata.pollutants\" :key=\"p\" :value=\"p\">\n              {{ p }}\n            </option>\n          </select>\n        </div>\n        <div ref=\"timeSeriesChart\" class=\"chart\"></div>\n      </div>\n    </div>\n\n    <!-- Second row: Geographic distribution map -->\n    <div class=\"row\">\n      <div class=\"card\">\n        <h2>Monitoring Station Distribution</h2>\n        <div class=\"station-selector\">\n          <select v-model=\"selectedStation\" @change=\"handleStationChange\">\n            <option value=\"\">All Stations</option>\n            <option v-for=\"station in stations\" :key=\"station['Site ID']\" :value=\"station['Site ID']\">\n              {{ station['Local Site Name'] }}\n            </option>\n          </select>\n        </div>\n        <div ref=\"mapChart\" class=\"chart\"></div>\n      </div>\n    </div>\n\n    <!-- Third row: Statistical charts -->\n    <div class=\"row two-charts\">\n      <div class=\"card\">\n        <h2>Station Pollutant Coverage</h2>\n        <div ref=\"barChart\" class=\"chart\"></div>\n      </div>\n      <div class=\"card\">\n        <h2>AQI Distribution</h2>\n        <div ref=\"pieChart\" class=\"chart\"></div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, watch } from 'vue'\nimport * as d3 from 'd3'\n\nexport default {\n  name: 'App',\n  setup() {\n    const timeSeriesChart = ref(null)\n    const mapChart = ref(null)\n    const barChart = ref(null)\n    const pieChart = ref(null)\n    const selectedPollutant = ref('')\n    const selectedStation = ref('')\n    \n  const data = ref(null)\n    const stations = ref([])\n    const metadata = ref({ pollutants: [] })\n    const timeRange = ref('')\n\n    const loadData = async () => {\n      try {\n        const response = await fetch('/air_quality_visualization.json')\n        data.value = await response.json()\n        metadata.value = {\n          ...data.value.metadata,\n          pollutants: ['ALL', ...data.value.metadata.pollutants]\n        }\n        stations.value = data.value.stations\n        selectedPollutant.value = metadata.value.pollutants[0]\n        timeRange.value = `${metadata.value.dateRange.start} to ${metadata.value.dateRange.end}`\n      } catch (error) {\n        console.error('Error loading data:', error)\n      }\n    }\n\n    const drawTimeSeries = () => {\n      if (!data.value || !timeSeriesChart.value) return\n\n      const margin = { top: 20, right: 120, bottom: 30, left: 60 }\n      const width = timeSeriesChart.value.clientWidth - margin.left - margin.right\n      const height = 400 - margin.top - margin.bottom\n\n      d3.select(timeSeriesChart.value).selectAll('*').remove()\n\n      const svg = d3.select(timeSeriesChart.value)\n        .append('svg')\n        .attr('width', width + margin.left + margin.right)\n        .attr('height', height + margin.top + margin.bottom)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top})`)\n\n      const pollutantColors = {\n        'PM2.5': '#FF6B6B',\n        'PM10': '#4ECDC4',\n        'NO2': '#45B7D1',\n        'SO2': '#96CEB4',\n        'CO': '#FFEEAD',\n        'O3': '#D4A5A5'\n      }\n\n      let filteredData\n      if (selectedPollutant.value === 'ALL') {\n        filteredData = data.value.timeSeriesData\n      } else {\n        filteredData = data.value.timeSeriesData\n          .filter(d => d.Pollutant === selectedPollutant.value)\n      }\n      \n      filteredData = filteredData.sort((a, b) => new Date(a.Date) - new Date(b.Date))\n\n      const x = d3.scaleTime()\n        .domain(d3.extent(filteredData, d => new Date(d.Date)))\n        .range([0, width])\n\n      const y = d3.scaleLinear()\n        .domain([0, d3.max(filteredData, d => +d.Concentration)])\n        .range([height, 0])\n        .nice()\n\n      svg.append('g')\n        .attr('transform', `translate(0,${height})`)\n        .call(d3.axisBottom(x).ticks(10))\n        .selectAll('text')\n        .style('text-anchor', 'middle')\n\n      svg.append('g')\n        .call(d3.axisLeft(y))\n\n      svg.append('text')\n        .attr('transform', 'rotate(-90)')\n        .attr('y', 0 - margin.left)\n        .attr('x', 0 - (height / 2))\n        .attr('dy', '1em')\n        .style('text-anchor', 'middle')\n        .text('Concentration')\n\n      if (selectedPollutant.value === 'ALL') {\n        const pollutants = [...new Set(filteredData.map(d => d.Pollutant))]\n        \n        pollutants.forEach(pollutant => {\n          const pollutantData = filteredData.filter(d => d.Pollutant === pollutant)\n          \n          const line = d3.line()\n            .x(d => x(new Date(d.Date)))\n            .y(d => y(+d.Concentration))\n            .curve(d3.curveMonotoneX)\n\n          const path = svg.append('path')\n            .datum(pollutantData)\n            .attr('fill', 'none')\n            .attr('stroke', pollutantColors[pollutant])\n            .attr('stroke-width', 2)\n            .attr('d', line)\n\n          const pathLength = path.node().getTotalLength()\n          path.attr('stroke-dasharray', pathLength)\n            .attr('stroke-dashoffset', pathLength)\n            .transition()\n            .duration(2000)\n            .attr('stroke-dashoffset', 0)\n        })\n\n        const legend = svg.append('g')\n          .attr('class', 'legend')\n          .attr('transform', `translate(${width + 10}, 0)`)\n\n        const legendItems = legend.selectAll('.legend-item')\n          .data(pollutants)\n          .enter()\n          .append('g')\n          .attr('class', 'legend-item')\n          .attr('transform', (d, i) => `translate(0, ${i * 20})`)\n\n        legendItems.append('line')\n          .attr('x1', 0)\n          .attr('x2', 20)\n          .attr('y1', 10)\n          .attr('y2', 10)\n          .attr('stroke', d => pollutantColors[d])\n          .attr('stroke-width', 2)\n\n        legendItems.append('text')\n          .attr('x', 25)\n          .attr('y', 10)\n          .attr('dy', '.35em')\n          .style('font-size', '12px')\n          .text(d => d)\n\n      } else {\n        const line = d3.line()\n          .x(d => x(new Date(d.Date)))\n          .y(d => y(+d.Concentration))\n          .curve(d3.curveMonotoneX)\n\n        const path = svg.append('path')\n          .datum(filteredData)\n          .attr('fill', 'none')\n          .attr('stroke', pollutantColors[selectedPollutant.value])\n          .attr('stroke-width', 2)\n          .attr('d', line)\n\n        const pathLength = path.node().getTotalLength()\n        path.attr('stroke-dasharray', pathLength)\n          .attr('stroke-dashoffset', pathLength)\n          .transition()\n          .duration(2000)\n          .attr('stroke-dashoffset', 0)\n\n        const dots = svg.selectAll('.dot')\n          .data(filteredData)\n          .enter()\n          .append('circle')\n          .attr('class', 'dot')\n          .attr('cx', d => x(new Date(d.Date)))\n          .attr('cy', d => y(+d.Concentration))\n          .attr('r', 4)\n          .attr('fill', pollutantColors[selectedPollutant.value])\n          .style('opacity', 0)\n\n        dots.transition()\n          .delay((d, i) => i * 10)\n          .style('opacity', 1)\n\n        const tooltip = d3.select(timeSeriesChart.value)\n          .append('div')\n          .attr('class', 'tooltip')\n          .style('opacity', 0)\n          .style('position', 'absolute')\n          .style('background-color', 'white')\n          .style('border', '1px solid #ddd')\n          .style('padding', '10px')\n          .style('border-radius', '5px')\n          .style('pointer-events', 'none')\n          .style('z-index', 100)\n\n        dots.on('mouseover', (event, d) => {\n          const chartRect = timeSeriesChart.value.getBoundingClientRect()\n          const mouseX = event.clientX - chartRect.left\n          const mouseY = event.clientY - chartRect.top\n\n          tooltip.transition()\n            .duration(200)\n            .style('opacity', .9)\n          \n          tooltip.html(`\n            Date: ${d.Date}<br/>\n            Concentration: ${d.Concentration} ${d.Units}<br/>\n            AQI: ${d['Daily AQI Value']}\n          `)\n            .style('left', `${mouseX + 10}px`)\n            .style('top', `${mouseY - 28}px`)\n\n\n          d3.select(event.target)\n            .transition()\n            .duration(200)\n            .attr('r', 6)\n        })\n        .on('mousemove', (event) => {\n          const chartRect = timeSeriesChart.value.getBoundingClientRect()\n          const mouseX = event.clientX - chartRect.left\n          const mouseY = event.clientY - chartRect.top\n\n          tooltip\n            .style('left', `${mouseX + 10}px`)\n            .style('top', `${mouseY - 28}px`)\n        })\n        .on('mouseout', (event) => {\n          tooltip.transition()\n            .duration(500)\n            .style('opacity', 0)\n\n          d3.select(event.target)\n            .transition()\n            .duration(200)\n            .attr('r', 4)\n        })\n      }\n    }\n\n    const drawMap = async () => {\n      if (!data.value || !mapChart.value) return\n\n      const margin = { top: 20, right: 20, bottom: 20, left: 20 }\n      const width = mapChart.value.clientWidth - margin.left - margin.right\n      const height = 400 - margin.top - margin.bottom\n\n      d3.select(mapChart.value).selectAll('*').remove()\n\n      const svg = d3.select(mapChart.value)\n        .append('svg')\n        .attr('width', width + margin.left + margin.right)\n        .attr('height', height + margin.top + margin.bottom)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top})`)\n\n      try {\n        // Load map data\n        const response = await fetch('/geo/los-angeles-county.geojson')\n        const laCounty = await response.json()\n\n        const projection = d3.geoMercator()\n          .fitSize([width, height], laCounty)\n\n        const path = d3.geoPath()\n          .projection(projection)\n\n        svg.append('g')\n          .selectAll('path')\n          .data(laCounty.features)\n          .enter()\n          .append('path')\n          .attr('d', path)\n          .attr('fill', '#f0f0f0')\n          .attr('stroke', '#ccc')\n          .attr('stroke-width', 0.5)\n\n        const stationGroups = svg.append('g')\n          .selectAll('.station')\n          .data(stations.value)\n          .enter()\n          .append('g')\n          .attr('class', 'station')\n          .attr('transform', d => {\n            const [x, y] = projection([+d['Site Longitude'], +d['Site Latitude']])\n            return `translate(${x},${y})`\n          })\n\n        stationGroups.append('circle')\n          .attr('r', 8)\n          .attr('fill', d => d['Site ID'] === selectedStation.value ? '#f44336' : '#2196F3')\n          .attr('opacity', 0)\n          .transition()\n          .duration(1000)\n          .attr('opacity', 0.7)\n\n        stationGroups\n          .on('mouseover', function(event, d) {\n\n            d3.select(this)\n              .append('text')\n              .attr('class', 'station-label')\n              .attr('dy', -10)\n              .text(d['Local Site Name'])\n              .style('text-anchor', 'middle')\n              .style('font-size', '12px')\n              .style('opacity', 0)\n              .transition()\n              .duration(200)\n              .style('opacity', 1)\n\n            const tooltip = d3.select(mapChart.value)\n              .append('div')\n              .attr('class', 'map-tooltip')\n              .style('position', 'absolute')\n              .style('background-color', 'white')\n              .style('padding', '10px')\n              .style('border-radius', '5px')\n              .style('box-shadow', '0 2px 5px rgba(0,0,0,0.2)')\n              .style('pointer-events', 'none')\n              .style('opacity', 0)\n\n            tooltip.html(`\n              <strong>${d['Local Site Name']}</strong><br/>\n              Longitude: ${d['Site Longitude']}<br/>\n              Latitude: ${d['Site Latitude']}<br/>\n              Monitored Pollutants: ${d['Pollutant'].length} types\n            `)\n              .style('left', (event.pageX + 10) + 'px')\n              .style('top', (event.pageY - 10) + 'px')\n              .transition()\n              .duration(200)\n              .style('opacity', 1)\n\n            d3.select(this).select('circle')\n              .transition()\n              .duration(200)\n              .attr('r', 12)\n          })\n          .on('mouseout', function(event, d) {\n            d3.select(this).select('.station-label').remove()\n\n            d3.select(mapChart.value)\n              .selectAll('.map-tooltip')\n              .transition()\n              .duration(200)\n              .style('opacity', 0)\n              .remove()\n\n            if (d['Site ID'] !== selectedStation.value) {\n              d3.select(this).select('circle')\n                .transition()\n                .duration(200)\n                .attr('r', 8)\n                .attr('fill', '#2196F3')\n                .attr('opacity', 0.7)\n            } else {\n              d3.select(this).select('circle')\n                .transition()\n                .duration(200)\n                .attr('r', 12)\n                .attr('fill', '#f44336')\n                .attr('opacity', 0.7)\n            }\n          })\n          .on('click', (event, d) => {\n            stationGroups.selectAll('circle')\n              .transition()\n              .duration(200)\n              .attr('fill', '#2196F3')\n              .attr('r', 8)\n              .attr('opacity', 0.7)\n\n            d3.select(event.currentTarget)\n              .select('circle')\n              .transition()\n              .duration(200)\n              .attr('fill', '#f44336')\n              .attr('r', 12)\n              .attr('opacity', 0.7)\n\n            selectedStation.value = d['Site ID']\n            handleStationChange()\n          })\n\n        const zoom = d3.zoom()\n          .scaleExtent([1, 8])\n          .on('zoom', (event) => {\n            svg.selectAll('path')\n              .attr('transform', event.transform)\n            svg.selectAll('.station')\n              .attr('transform', function(d) {\n                const [x, y] = projection([+d['Site Longitude'], +d['Site Latitude']])\n                return `translate(${event.transform.applyX(x)},${event.transform.applyY(y)})`\n              })\n          })\n\n        svg.call(zoom)\n\n      } catch (error) {\n        console.error('Error loading map data:', error)\n        svg.append('text')\n          .attr('x', width / 2)\n          .attr('y', height / 2)\n          .attr('text-anchor', 'middle')\n          .text('Error loading map data')\n      }\n    }\n\n    const drawBarChart = () => {\n      if (!data.value || !barChart.value) return\n\n      const margin = { top: 20, right: 20, bottom: 40, left: 40 }\n      const width = barChart.value.clientWidth - margin.left - margin.right\n      const height = 400 - margin.top - margin.bottom\n\n      d3.select(barChart.value).selectAll('*').remove()\n\n      const svg = d3.select(barChart.value)\n        .append('svg')\n        .attr('width', width + margin.left + margin.right)\n        .attr('height', height + margin.top + margin.bottom)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top})`)\n\n      let stationStats = data.value.stationStats\n      if (selectedStation.value) {\n        stationStats = stationStats.filter(stat => stat['Site ID'] === selectedStation.value)\n      }\n\n      const allPollutants = metadata.value.pollutants.filter(p => p !== 'ALL')\n      \n      let pollutantCounts = {}\n      allPollutants.forEach(pollutant => {\n        pollutantCounts[pollutant] = 0\n      })\n\n      stationStats.forEach(stat => {\n        if (stat.Pollutant in pollutantCounts) {\n          pollutantCounts[stat.Pollutant]++\n        }\n      })\n\n      const totalStations = selectedStation.value ? 1 : stations.value.length\n\n      const barData = allPollutants.map(pollutant => ({\n        pollutant,\n        count: pollutantCounts[pollutant],\n        percentage: (pollutantCounts[pollutant] / totalStations) * 100\n      }))\n\n      // Create scales\n      const x = d3.scaleBand()\n        .range([0, width])\n        .domain(allPollutants)\n        .padding(0.3)\n\n      const y = d3.scaleLinear()\n        .range([height, 0])\n        .domain([0, 100])\n\n      svg.append('g')\n        .attr('transform', `translate(0,${height})`)\n        .call(d3.axisBottom(x))\n        .selectAll('text')\n        .style('text-anchor', 'end')\n        .attr('dx', '-.8em')\n        .attr('dy', '.15em')\n        .attr('transform', 'rotate(-45)')\n\n      svg.append('g')\n        .call(d3.axisLeft(y).tickFormat(d => d + '%'))\n\n      const bars = svg.selectAll('.bar')\n        .data(barData)\n        .enter()\n        .append('rect')\n        .attr('class', 'bar')\n        .attr('x', d => x(d.pollutant))\n        .attr('width', x.bandwidth())\n        .attr('y', height)\n        .attr('height', 0)\n        .attr('fill', d => d.pollutant === selectedPollutant.value ? '#f44336' : '#2196F3')\n\n      bars.transition()\n        .duration(1000)\n        .attr('y', d => y(d.percentage))\n        .attr('height', d => height - y(d.percentage))\n\n      svg.selectAll('.bar-label')\n        .data(barData)\n        .enter()\n        .append('text')\n        .attr('class', 'bar-label')\n        .attr('x', d => x(d.pollutant) + x.bandwidth() / 2)\n        .attr('y', d => y(d.percentage) - 5)\n        .attr('text-anchor', 'middle')\n        .text(d => `${d.percentage.toFixed(1)}%`)\n        .style('opacity', 0)\n        .transition()\n        .duration(1000)\n        .style('opacity', 1)\n    }\n\n    const drawPieChart = () => {\n      if (!data.value || !pieChart.value) return\n\n      const margin = { top: 20, right: 160, bottom: 20, left: 20 }\n      const width = pieChart.value.clientWidth - margin.left - margin.right\n      const height = 400 - margin.top - margin.bottom\n      const radius = Math.min(width, height) / 2\n\n      d3.select(pieChart.value).selectAll('*').remove()\n\n      const svg = d3.select(pieChart.value)\n        .append('svg')\n        .attr('width', width + margin.left + margin.right)\n        .attr('height', height + margin.top + margin.bottom)\n        .append('g')\n        .attr('transform', `translate(${width/2 + margin.left},${height/2 + margin.top})`)\n\n      let filteredData = data.value.timeSeriesData\n      if (selectedStation.value) {\n        filteredData = filteredData.filter(d => d['Site ID'] === selectedStation.value)\n      }\n\n      const agiRanges = [\n        { name: 'Good', range: '0-50', min: 0, max: 50, color: '#00e400' },\n        { name: 'Moderate', range: '51-100', min: 51, max: 100, color: '#ffff00' },\n        { name: 'Unhealthy for Sensitive Groups', range: '101-150', min: 101, max: 150, color: '#ff7e00' },\n        { name: 'Unhealthy', range: '151-200', min: 151, max: 200, color: '#ff0000' },\n        { name: 'Very Unhealthy', range: '201-300', min: 201, max: 300, color: '#99004c' },\n        { name: 'Hazardous', range: '>300', min: 301, max: Infinity, color: '#7e0023' }\n      ]\n\n      const pieData = agiRanges.map(range => ({\n        ...range,\n        value: filteredData.filter(d => \n          d['Daily AQI Value'] >= range.min && \n          d['Daily AQI Value'] <= range.max\n        ).length\n      })).filter(d => d.value > 0)\n\n      const total = d3.sum(pieData, d => d.value)\n\n      const pie = d3.pie()\n        .value(d => d.value)\n        .sort(null)\n\n      const arc = d3.arc()\n        .innerRadius(radius * 0.4)\n        .outerRadius(radius * 0.8)\n\n      const arcs = svg.selectAll('.arc')\n        .data(pie(pieData))\n        .enter()\n        .append('g')\n        .attr('class', 'arc')\n\n      arcs.append('path')\n        .attr('d', arc)\n        .attr('fill', d => d.data.color)\n        .attr('stroke', 'white')\n        .style('stroke-width', '2px')\n        .style('opacity', 0)\n        .transition()\n        .duration(1000)\n        .style('opacity', 1)\n        .attrTween('d', function(d) {\n          const interpolate = d3.interpolate({ startAngle: 0, endAngle: 0 }, d)\n          return function(t) {\n            return arc(interpolate(t))\n          }\n        })\n\n      const legend = svg.append('g')\n        .attr('transform', `translate(${radius + 30}, ${-radius})`)\n\n      const legendItems = legend.selectAll('.legend-item')\n        .data(pieData)\n        .enter()\n        .append('g')\n        .attr('class', 'legend-item')\n        .attr('transform', (d, i) => `translate(0, ${i * 60})`)\n\n      legendItems.append('rect')\n        .attr('width', 20)\n        .attr('height', 20)\n        .attr('fill', d => d.color)\n        .style('opacity', 0)\n        .transition()\n        .duration(1000)\n        .style('opacity', 1)\n\n      const legendText = legendItems.append('text')\n        .attr('x', 30)\n        .attr('y', 15)\n        .style('font-size', '12px')\n        .style('opacity', 0)\n\n      legendText.append('tspan')\n        .text(d => `${d.name} (${d.range})`)\n        .style('font-weight', 'bold')\n\n      legendText.append('tspan')\n        .attr('x', 30)\n        .attr('dy', '1.2em')\n        .text(d => `${d.value} times (${(d.value/total*100).toFixed(1)}%)`)\n\n      legendText.transition()\n        .delay(1000)\n        .duration(500)\n        .style('opacity', 1)\n\n      const centerText = svg.append('text')\n        .attr('text-anchor', 'middle')\n        .style('opacity', 0)\n\n      centerText.append('tspan')\n        .text('AQI')\n        .attr('x', 0)\n        .attr('dy', '0em')\n        .style('font-size', '24px')\n        .style('font-weight', 'bold')\n\n      centerText.append('tspan')\n        .text('Distribution')\n        .attr('x', 0)\n        .attr('dy', '1.2em')\n        .style('font-size', '18px')\n\n      centerText.transition()\n        .delay(1500)\n        .duration(500)\n        .style('opacity', 1)\n    }\n\n    const handleStationChange = () => {\n      drawPieChart()\n      drawBarChart()\n    }\n\n    watch(selectedPollutant, () => {\n      drawTimeSeries()\n      drawBarChart()\n    })\n\n    const handleResize = () => {\n      drawTimeSeries()\n      drawMap()\n      drawBarChart()\n      drawPieChart()\n    }\n\n    onMounted(async () => {\n      await loadData()\n      drawTimeSeries()\n      drawMap()\n      drawBarChart()\n      drawPieChart()\n      window.addEventListener('resize', handleResize)\n    })\n\n    return {\n      timeSeriesChart,\n      mapChart,\n      barChart,\n      pieChart,\n      selectedPollutant,\n      selectedStation,\n      stations,\n      metadata,\n      timeRange,\n      handleStationChange\n    }\n  }\n}\n</script>\n\n<style>\n.container {\n max-width: 1400px;\n margin: 0 auto;\n padding: 20px;\n font-family: Arial, sans-serif;\n background-color: #f5f5f5;\n}\n\n.header {\n text-align: center;\n margin-bottom: 30px;\n}\n\n.header h1 {\n color: #333;\n margin-bottom: 10px;\n}\n\n.row {\n margin-bottom: 30px;\n}\n\n.two-charts {\n display: grid;\n grid-template-columns: 1fr 1fr;\n gap: 20px;\n}\n\n.card {\n background: white;\n border-radius: 10px;\n box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n padding: 20px;\n transition: all 0.3s ease;\n}\n\n.card:hover {\n transform: translateY(-2px);\n box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);\n}\n\n.card h2 {\n color: #333;\n margin-bottom: 20px;\n font-size: 1.2em;\n}\n\n.chart {\n width: 100%;\n height: 400px;\n position: relative;\n}\n\n.pollutant-selector,\n.station-selector {\n margin-bottom: 15px;\n text-align: left;\n}\n\nselect {\n padding: 8px 12px;\n border-radius: 5px;\n border: 1px solid #ddd;\n font-size: 14px;\n background-color: white;\n min-width: 200px;\n cursor: pointer;\n transition: all 0.3s ease;\n}\n\nselect:hover {\n border-color: #2196F3;\n}\n\nselect:focus {\n outline: none;\n border-color: #2196F3;\n box-shadow: 0 0 0 2px rgba(33, 150, 243, 0.2);\n}\n\nlabel {\n margin-right: 10px;\n color: #666;\n}\n\n.tooltip {\n font-size: 12px;\n pointer-events: none;\n z-index: 100;\n box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n line-height: 1.5;\n}\n\n.dot:hover {\n cursor: pointer;\n}\n\n/* Add responsive layout */\n@media (max-width: 1200px) {\n .container {\n   padding: 15px;\n }\n \n .card {\n   padding: 15px;\n }\n}\n\n@media (max-width: 768px) {\n .two-charts {\n   grid-template-columns: 1fr;\n }\n \n .chart {\n   height: 300px;\n }\n \n .card h2 {\n   font-size: 1.1em;\n }\n \n select {\n   width: 100%;\n   max-width: none;\n }\n}\n\n@media (max-width: 480px) {\n .header h1 {\n   font-size: 1.5em;\n }\n \n .chart {\n   height: 250px;\n }\n}\n\n.map-tooltip {\n  z-index: 100;\n  font-size: 12px;\n  line-height: 1.4;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}